pipeline {
    agent any
        
    tools {
        maven 'maven3'
    }
    environment {
       SCANNER_HOME= tool 'sonar-scanner'   
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'gitcred', url: 'https://github.com/jayakumarm06/Multi-Tier-With-Database.git'
            }
        }
         stage('Compile') {
            steps {
               sh 'mvn compile'
            }
        }
         stage('Test') {
            steps {
                sh 'mvn test -DskipTests=true' 
            }
        }
         stage('Trivy Fs Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
         stage('Sonarqube analysis') {
            steps {
               withSonarQubeEnv('sonar') {
                   sh '$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Multitier -Dsonar.projectKey=Multitier -Dsonar.java.binaries=target'   
                }
            }
        }
         stage('Build') {
            steps {
                sh 'mvn package -DskipTests=true'
            }
        }
        stage('Artifact publish to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings.xml', jdk: '', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh 'mvn deploy -DskipTests=true'
                }
            }
        }
        stage('Docker Build Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t jaikumarm06/bankapp:latest .'
                    }
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image --format table -o fs-report.html jaikumarm06/bankapp:latest'
            }
        }
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push jaikumarm06/bankapp:latest'
                    }
                }
            }
        }
        stage('Deploy to k8s') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://7F8B6D2C648632790AB9880E9D614D21.gr7.us-east-1.eks.amazonaws.com') {
                    sh 'kubectl apply -f ds.yml -n webapps'
                    sleep 30
                }
            }
        }
        stage('Verify Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://7F8B6D2C648632790AB9880E9D614D21.gr7.us-east-1.eks.amazonaws.com') {
                    sh 'kubectl get pods -n webapps'
                    sh 'kubectl get svc -n webapps'
                    
                }
            }
        }
    }
}
